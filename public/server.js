(()=>{const e={},t=e=>e[0].id,s=e=>e[2]||t(e),n=(e,t)=>e[2]=t,r=e=>e[1],o=(e,t)=>e[1]=t,a=e=>e[1]=null,l=(e,t)=>[e,t],i=(e,t)=>JSON.stringify([e,t]),c=()=>(+new Date*Math.random()).toString(16),d=e=>(t,s)=>{try{e(t,s)}catch(e){s.send(i(null,"Internal server error."))}},p=()=>{const t=[],s=e=>{for(let s=0;s<t.length;s++){if(t[s].id===e)return!0}};for(const n in e){const o=r(e[n]);o&&(s(o.id)||t.push(o))}return t},u=()=>p().filter(e=>!e.isStarted()&&!e.isPractice()),_=()=>{((t,s,n)=>{for(const r in e){if(r===n)continue;const[o]=e[r];o.emit(t,s)}})(G_S_LIST_UPDATED,l(u()))},m=(t,s)=>{const n=(t=>e[t])(t);return n||(s.send(i(null,"No user exists: "+t)),!1)},G={[G_R_CREATE+"/:id/:userName/:isPractice"]:d((e,t)=>{const{id:a,userName:l,isPractice:c}=e.params,d=m(a,t);if(d)if(l)if(r(d))t.send(i(null,"A game already exists for that user: "+s(d)));else{n(d,l);const e=l+"'s Game",s=S(d,e);o(d,s),"true"===c&&s.setMapIndex(-1),t.send(i({id:s.id,name:e})),_()}else t.send(i(null,"No user name specified"))}),[G_R_JOIN+"/:id/:args"]:d((e,t)=>{const{id:s,args:r}=e.params,a=r.indexOf(","),l=r.slice(0,a),c=r.slice(a+1),d=m(s,t);if(!d)return;const u=(e=>p().reduce((t,s)=>s.id===e?s:t,null))(l);u?(o(d,u),n(d,c),u.join(d)?(t.send(i({id:u.id,name:u.name,players:u.getPlayers()})),_()):t.send(i(null,"Could not join game."))):t.send(i(null,"A game exists for that user: "+s))}),[G_R_LEAVE+"/:id"]:d((e,t)=>{const{id:s}=e.params,n=m(s,t);if(!n)return;const o=r(n);o?(a(n),o.leave(n),t.send(i(o.id)),_()):t.send(i(null,"A game exists for that user: "+s))}),[G_R_START+"/:id/:mapIndex"]:d((e,t)=>{const{id:s,mapIndex:n}=e.params,o=m(s,t);if(!o)return;const a=r(o);a?a.canStart()?(t.send(i(!0)),a.setMapIndex(Number(n)),a.start(),_()):t.send(i(null,"Cannot start game.")):t.send(i(null,"No game exists for that user: "+s))}),[G_R_CONFIRM_ACTION+"/:id/:action/:args"]:d((e,t)=>{const{id:s,action:n,args:o}=e.params,a=m(s,t);if(!a)return;const l=r(a);l?l.isStarted()?l.confirmAction(n,o,a)?t.send(i(!0)):t.send(i(null,"Cannot confirm action.")):t.send(i(null,"Cannot send actions to a game that has not been started!")):t.send(i(null,"No game exists for that user: "+s))}),io:t=>{const s=(e=>[e,"",""])(t);e[t.id]=s,t.on("disconnect",d(()=>{(t=>{const[s,n]=t;n&&n.leave(t),delete e[s]})(s)}));const n=c();t.emit(G_S_CONNECTED,l({games:u(),maps:x,id:t.id,key:n}))}};module.exports=G;const A=60/G_SCALE,y=12*G_AU,h=20*G_AU,f=e=>({color:"aquamarine",mass:5*10**30,r:A,hp:5,...e}),g=(e,t,s)=>({x:e,y:t,r:s}),U=(e,t,s)=>({type:"coin",value:250,r:G_AU/4,x:e,y:t,posR:s}),x=[{name:"Small Map",maxRoundLength:8e3,maxPlayers:4,width:y,height:y,playerLocations:[g(0,-y/3,G_AU),g(0,y/3,G_AU),g(-y/3,0,G_AU),g(y/3,0,G_AU)],resourceLocations:[U(-y/1.8,-y/1.8,G_AU),U(y/1.8,-y/1.8,G_AU),U(-y/1.8,y/1.8,G_AU),U(y/1.8,y/1.8,G_AU),U(0,y/1.5,G_AU),U(0,-y/1.5,G_AU),U(y/1.5,0,G_AU),U(-y/1.5,0,G_AU)],planetLocations:[f({x:0,y:0,posR:0}),f({x:-y/3,y:-y/3,posR:G_AU}),f({x:y/3,y:-y/3,posR:G_AU}),f({x:-y/3,y:y/3,posR:G_AU}),f({x:y/3,y:y/3,posR:G_AU})]},{name:"Large Map",maxRoundLength:8e3,maxPlayers:4,width:h,height:h,playerLocations:[g(0,-h/1.5,G_AU),g(0,h/1.5,G_AU),g(-h/1.5,0,G_AU),g(h/1.5,0,G_AU)],resourceLocations:[U(0,-h/2.2,G_AU),U(0,h/2.2,G_AU),U(-h/2.2,0,G_AU),U(h/2.2,0,G_AU),U(-h/1.5,-h/1.5,G_AU),U(h/1.5,-h/1.5,G_AU),U(-h/1.5,h/1.5,G_AU),U(h/1.5,h/1.5,G_AU)],planetLocations:[f({x:G_AU,y:G_AU,posR:0}),f({x:-G_AU,y:-G_AU,posR:0}),f({x:-G_AU,y:G_AU,posR:0}),f({x:G_AU,y:-G_AU,posR:0}),f({x:h/1.1,y:h/1.1,posR:G_AU}),f({x:-h/1.1,y:h/1.1,posR:G_AU}),f({x:h/1.1,y:-h/1.1,posR:G_AU}),f({x:-h/1.1,y:-h/1.1,posR:G_AU}),f({x:-h/2.5,y:-h/2.5,posR:2*G_AU}),f({x:h/2.5,y:-h/2.5,posR:2*G_AU}),f({x:-h/2.5,y:h/2.5,posR:2*G_AU}),f({x:h/2.5,y:h/2.5,posR:2*G_AU})]}],S=(e,n)=>{let r,o,i,d,p=[e],u=0,m=!1,G=!1,A=null,y=1,h=0,f=25/G_SCALE,g=1e4,U=0;const S=["blue","red","green","yellow"],R=()=>{try{let e=+new Date;o=e-r,r=e;let t=A,s=G_applyGravity(t.projectiles,t.projectiles.concat(t.planets),t.players.filter(e=>!e.dead).concat(t.resources),o);A.collisions=s;let n=s.length;if(n)for(let e=0;e<n;e++)L(s[e]);for(let e=0;e<A.projectiles.length;e++){const t=A.projectiles[e];"Move"===t.meta.type&&M(t.meta.player,t.px,t.py),t.meta.remove?(A.projectiles.splice(e,1),e--):(r-u>=t.t||E(t.px,t.py))&&(s.push([t,null]),A.projectiles.splice(e,1),e--)}if(0===A.projectiles.length)return void I();h++,(h>=10||n)&&(h=0,((e,t,s)=>{O.emitAll(G_S_BROADCAST,l({i:e,timestamp:t,gameData:s}))})(y++,r,A))}catch(e){I()}},L=e=>{const[t,s]=e;let n=C(t.meta.player,A);switch(!0){case!(!s.color||!s.name):n=C(s.id,A),n.dead=!0,t.meta.remove=!0;break;case(e=>e.meta&&e.meta.proj)(s):const e=t.meta.speed,r=s.meta.speed;e>=r&&(s.meta.remove=!0),r>=e&&(t.meta.remove=!0);break;case(e=>"coin"===e.type)(s):n.funds+=s.value,P(s.id,A);break;case(e=>!!e.color)(s):t.meta.remove=!0,"Move"===t.meta.type&&(n.dead=!0)}},E=(e,t)=>{const s=A.width+G_AU/2,n=A.height+G_AU/2;return e<-s||e>s||t>n||t<-n},T=()=>{u=r=+new Date,o=0,O.emitAll(G_S_START_SIMULATION,l(A)),d=setTimeout(I,A.maxRoundLength),i=setInterval(R,G_FRAME_MS)},I=()=>{if(m){O.emitAll(G_S_STOP_SIMULATION,l(A)),clearInterval(i),i=-1,clearTimeout(d),d=-1,A.projectiles=[],A.collisions=[];const e=D();e?(O.finished=!0,O.finish(e)):A.players.forEach(e=>{e.ready=!1,e.funds+=25})}},v=e=>{let t=e.length;e=[...e];const s=[];for(let n=0;n<t;n++){const t=Math.floor(Math.random()*e.length);s.push(e[t]),e.splice(t,1)}return s},C=(e,s)=>{const n="string"==typeof e?e:t(e);return s.players.reduce((e,t)=>t.id===n?t:e,null)},P=(e,t)=>{const s=((e,t)=>t.resources.reduce((t,s,n)=>s.id===e?n:t,-1))(e,t);s>-1&&t.resources.splice(s,1)},M=(e,t,s)=>{const n=C(e,A);N(t,s)&&(n.x=t,n.y=s)},N=(e,t)=>{const{width:s,height:n}=A;return e>=-s&&e<=s&&t>=-n&&t<=n},j=()=>A.players.reduce((e,t)=>e&&(!!t.dead||t.ready),!0),D=()=>{if(G)return!1;let e=[];for(let t=0;t<A.players.length;t++){const s=A.players[t];s.dead||e.push(s)}return 0===e.length?"draw":1===e.length&&e[0].id},w=()=>{const e=O.getPlayers();O.emitAll(G_S_LOBBY_LIST_UPDATED,l(e))},O={id:t(e),name:n,getPlayers:()=>p.map(e=>({id:t(e),userName:s(e)})),join:e=>!m&&!G&&(p.length<x[U].maxPlayers&&(p.push(e),w(),!0)),leave(e){for(let t=0;t<p.length;t++){const s=p[t];if(s===e){if(p.splice(t,1),a(s),m){const e=C(s,A);return 0===p.length?O.stop():e.dead||(e.dead=!0),D()?O.stop():j()&&setTimeout(()=>{try{T()}catch(e){}},500),!0}return 0===t?O.stop():w(),!0}}return!1},start(){m=!0,A=(e=>{let n=v(e);const r=x[U],{resourceLocations:o,planetLocations:a,playerLocations:l}=r,i={...r,players:[],planets:[],resources:[],projectiles:[],collisions:[],result:!1,baseFundsPerRound:25};for(let e=0;e<n.length;e++){const r=n[e],{x:o,y:a,r:c}=l[e],d=G_getRandomLocInCircle(o,a,c);i.players.push({id:t(r),name:s(r),funds:g,ready:!1,dead:!1,hp:1,color:S[e],r:f,...d,target:[d.x,d.y]})}for(let e=0;e<a.length;e++){const t=a[e],{x:s,y:n,mass:r,color:o,r:l,posR:c}=t,d=G_getRandomLocInCircle(s,n,c);i.planets.push(G_Body(o,r,o,l,0,0,d.x,d.y))}for(let e=0;e<o.length;e++){const t=o[e],{x:s,y:n,posR:r}=t;i.resources.push({...t,id:c(),...G_getRandomLocInCircle(s,n,r)})}return i})(p),O.emitAll(G_S_START,l({startTime:u,gameData:A}))},stop(){I(),O.emitAll(G_S_STOP,l("The game was stopped.")),p.forEach(e=>{a(e)}),_()},finish(e){A.result=e,O.emitAll(G_S_FINISHED,l(A)),p.forEach(e=>{a(e)}),_()},setMapIndex(e){e>=0&&e<x.length&&(U=e),-1===e&&(U=0,G=!0,g=1e5)},confirmAction(e,t,s){const n=C(s,A);if(!n)return!1;if(n.dead)return!1;switch(e){case"Shoot":case"Move":const[r,o,a]=t.split(","),l=(([e,t])=>{const s=Math.sqrt(e*e+t*t);return[e/s,t/s]})([r-n.x,o-n.y]),i=((e,t,s,n)=>{let r=5/G_SCALE,o=A.maxRoundLength;"Move"===e&&(r=15/G_SCALE,o=1e3);const{color:a,x:l,y:i}=n;return[G_Body({proj:!0,type:e,id:c(),player:n.id,speed:t,color:n.color},1,a,r,s[0]*t,s[1]*t,l,i,o)]})(e,G_SPEEDS[a]&&G_SPEEDS[a][0]||G_SPEEDS.normal[0],l,n),d=((e,t,s)=>{const n=G_getActionCost(e)+G_getSpeedCost(t);return C(s,A).funds>n&&n})(e,a,s);if(!1===d)return!1;A.projectiles=A.projectiles.concat(i),n.target=[r,o],n.funds-=d,n.cost=d;break;default:t=null}return n.action=e,n.ready=!0,j()&&setTimeout(()=>{try{T()}catch(e){}},500),!0},canStart:()=>!!G||p.length>1&&p.length<=x[U].maxPlayers&&!m,isPractice:()=>G,isStarted:()=>m,emitAll(e,t){p.forEach(s=>{s[0].emit(e,t)})}};return O}})();