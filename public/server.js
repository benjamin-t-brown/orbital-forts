(()=>{const e={},t=e=>e[0].id,o=e=>e[2],n=(e,t)=>e[2]=t,s=e=>e[1],a=(e,t)=>e[1]=t,r=e=>e[1]=null,l=e=>"Game exists: "+o(e),c=e=>"No game: "+o(e),i=(e,t)=>[e,t],d=(e,t)=>JSON.stringify([e,t]),m=()=>(+new Date*Math.random()).toString(16),p=e=>(t,o)=>{try{e(t,o)}catch(e){console.error("ERROR",e.stack),o.send(d(null,"Error."))}},u=()=>{const t=[],o=e=>{for(let o=0;o<t.length;o++)if(t[o].id===e)return!0};for(const n in e){const a=s(e[n]);a&&(o(a.id)||t.push(a))}return t},g=()=>u().filter(e=>!e.isStarted()&&!e.isPractice()&&e.getPlayers().length<4),_=()=>{((t,o,n)=>{for(const n in e){if(void 0===n)continue;const[s]=e[n];s.emit(t,o)}})(G_S_LIST_UPDATED,i(g()))},h=(t,o)=>(t=>e[t])(t)||(o.send(d(null,"No user: "+t)),!1),y={[G_R_CREATE+"/:id/:userName/:isPractice"]:p(async(e,t)=>{const{id:o,userName:r,isPractice:c}=e.params,i=h(o,t);if(i)if(r)if(s(i))t.send(d(null,l(i)));else{n(i,r);const e=r+"'s Game";console.log("Create game",e,c);const o=A(i,e);a(i,o),"true"===c&&await o.setPractice(),t.send(d({id:o.id,name:e})),_()}else t.send(d(null,"No given userName."))}),[G_R_JOIN+"/:id/:args"]:p(async(e,t)=>{const{id:s,args:r}=e.params,c=r.indexOf(","),i=r.slice(0,c),m=r.slice(c+1),p=h(s,t);if(!p)return;const g=(e=>u().reduce((t,o)=>o.id===e?o:t,null))(i);g?(a(p,g),n(p,m),console.log("Join game",o(p),g.name),await g.join(p)?(t.send(d({id:g.id,name:g.name,players:g.getPlayers()})),_()):t.send(d(null,"Cannot join."))):t.send(d(null,l(p)))}),[G_R_LEAVE+"/:id"]:p((e,t)=>{const{id:n}=e.params,a=h(n,t);if(!a)return;const c=s(a);c?(console.log("Leave game",o(a),c.name),r(a),c.leave(a),t.send(d(c.id)),_()):t.send(d(null,l(a)))}),[G_R_START+"/:id/:mapIndex"]:p(async(e,t)=>{const{id:o,mapIndex:n}=e.params,a=h(o,t);if(!a)return;const r=s(a);r?r.canStart()?(console.log("Start game",r.name),t.send(d(!0)),await r.setMapIndex(+n),await r.start(),_()):t.send(d(null,"Cannot start yet.")):(console.log("error",g()),t.send(d(null,c(a))))}),[G_R_CONFIRM_ACTION+"/:id/:action/:args"]:p((e,t)=>{const{id:n,action:a,args:r}=e.params,l=h(n,t);if(!l)return;const i=s(l);i?i.isStarted()?(console.log("Confirm action",i.name,o(l),a,r),i.confirmAction(a,r,l)?t.send(d(!0)):t.send(d(null,"Cannot confirm."))):t.send(d(null,"Game not started.")):t.send(d(null,c(l)))}),io:async t=>{const o=(e=>[e,"",""])(t);e[t.id]=o,t.on("disconnect",p(()=>{console.log("Disconnected: "+t.id),(t=>{const[o,n]=t;n&&n.leave(t),delete e[o]})(o)}));const n=m();t.emit(G_S_CONNECTED,i({games:g(),maps:await f(),id:t.id,key:n})),console.log("Connected: "+t.id,n)}};module.exports=y;const f=async()=>await storage.get("maps");let G=0;const S=async()=>{if(0===G){const e=await f();G=e.length}return G},A=(e,n)=>{let s,a,l,c,d=[e],p=0,u=!1,g=!1,h=null,y=1,G=0,A=25/G_SCALE,C=175,T=0;const E=["blue","red","green","yellow"],w=()=>{try{let e=+new Date;a=e-s,s=e;let t=h,{projectiles:o,planets:n,players:r,resources:l}=t,c=G_applyGravity(o,o.concat(n),r.filter(e=>!e.dead).concat(l),a);h.collisions=c;let d=c.length;if(d)for(let e=0;e<d;e++)L(c[e])&&(c.splice(e,1),e--,d--);for(let e=0;e<o.length;e++){const t=o[e];t.meta.type===G_action_move&&x(t.meta.player,t.px,t.py),t.meta.remove?(o.splice(e,1),e--):(s-p>=t.t||v(t.px,t.py))&&(c.push([t,null]),o.splice(e,1),e--)}for(let e=0;e<n.length;e++)n[e].meta.remove&&(n.splice(e,1),e--);if(0===o.length)return void R();G++,(G>=10||c.length)&&(G=0,((e,t,o)=>{M.emitAll(G_S_BROADCAST,i({i:e,timestamp:t,gameData:o}))})(y++,s,h))}catch(e){console.error("error running simulation",e),R()}},L=e=>{const[t,o]=e;let n=O(t.meta.player,h);switch(!0){case!(!o.color||!o.name):console.log("COL with player",t,o),n=O(o.id,h),n.dead=!0,t.meta.remove=!0;break;case(e=>e.meta&&e.meta.proj)(o):if(o.meta.player===t.meta.player)return!0;console.log("COL with other projectile",t,o);const e=t.meta.speed*t.meta.mass,s=o.meta.speed*o.meta.mass;e>=s&&(console.log("This proj is faster or same as other, remove other"),o.meta.remove=!0),s>=e&&(console.log("This proj is slower or same as other, remove this"),t.meta.remove=!0);break;case(e=>e.type===G_res_coin)(o):console.log("COL with coin",t,o),n.funds+=o.value,P(o.id,h);break;case(e=>e.type===G_res_spray)(o):console.log("COL with spray",t,o),n.actions[G_action_spread]+=2,P(o.id,h);break;case(e=>e.type===G_res_planetCracker)(o):console.log("COL with planet cracker",t,o),n.actions[G_action_planetCracker]+=2,P(o.id,h);break;case(e=>!!e.color)(o):console.log("COL with planet",t,o),t.meta.remove=!0;const a=t.meta.type;a===G_action_move?(console.log("Player died by running into planet"),n.dead=!0):a===G_action_planetCracker&&(console.log("Player removed a planet with a planet cracker!"),o.meta.remove=!0)}},v=(e,t)=>{const o=h.width+G_AU/2,n=h.height+G_AU/2;return e<-o||e>o||t>n||t<-n},I=()=>{console.log("START SIMULATION"),p=s=+new Date,a=0,M.emitAll(G_S_START_SIMULATION,i(h)),c=setTimeout(R,h.maxRoundLength),l=setInterval(w,G_FRAME_MS)},R=()=>{if(console.log("STOP SIMULATION"),u){M.emitAll(G_S_STOP_SIMULATION,i(h)),clearInterval(l),l=-1,clearTimeout(c),c=-1,h.projectiles=[],h.collisions=[];const e=D();e?(M.finished=!0,M.finish(e)):h.players.forEach(e=>{e.ready=!1,e.funds+=25})}},O=(e,o)=>{const n="string"==typeof e?e:t(e);return o.players.reduce((e,t)=>t.id===n?t:e,null)},P=(e,t)=>{const o=((e,t)=>t.resources.reduce((t,o,n)=>o.id===e?n:t,-1))(e,t);o>-1&&t.resources.splice(o,1)},x=(e,t,o)=>{const n=O(e,h);N(t,o)&&(n.x=t,n.y=o)},N=(e,t)=>{const{width:o,height:n}=h;return e>=-o&&e<=o&&t>=-n&&t<=n},k=()=>h.players.reduce((e,t)=>e&&(!!t.dead||t.ready),!0),D=()=>{if(g)return!1;let e=[];for(let t=0;t<h.players.length;t++){const o=h.players[t];o.dead||e.push(o)}return 0===e.length?"draw":1===e.length&&e[0].id},j=()=>{const e=M.getPlayers();M.emitAll(G_S_LOBBY_LIST_UPDATED,i(e))},M={id:t(e),name:n,getPlayers:()=>d.map(e=>({id:t(e),userName:o(e)})),join:async e=>u||g?(console.error("Cannot join"),!1):d.length<4&&(d.push(e),j(),!0),leave(e){for(let t=0;t<d.length;t++){const o=d[t];if(o===e){if(d.splice(t,1),r(o),u){const e=O(o,h);return 0===d.length?M.stop():e.dead||(e.dead=!0),D()?M.stop():k()&&(console.log("Starting after a moment..."),setTimeout(()=>{try{I()}catch(e){console.log("Error starting",e)}},500)),!0}return 0===t?M.stop():j(),!0}}return!1},async start(){u=!0;const e=await f();h=((e,n)=>{let s=(e=>{let t=e.length;e=[...e];const o=[];for(let n=0;n<t;n++){const t=Math.floor(Math.random()*e.length);o.push(e[t]),e.splice(t,1)}return o})(e);const{resourceLocations:a,planetLocations:r,playerLocations:l}=n,c={...n,players:[],planets:[],resources:[],projectiles:[],collisions:[],result:!1,baseFundsPerRound:25};for(let e=0;e<s.length;e++){const n=s[e],{x:a,y:r,r:i}=l[e],d=G_getRandomLocInCircle(a,r,i);c.players.push({id:t(n),name:o(n),funds:C,actions:{[G_action_shoot]:99,[G_action_move]:99,[G_action_spread]:0,[G_action_planetCracker]:0},ready:!1,dead:!1,hp:1,color:E[e],r:A,...d,target:[d.x,d.y]})}for(let e=0;e<r.length;e++){const t=r[e],{x:o,y:n,mass:s,color:a,r:l,posR:i}=t,d=G_getRandomLocInCircle(o,n,i);c.planets.push(G_Body({color:a,type:"planet"},s,a,l,0,0,d.x,d.y))}for(let e=0;e<a.length;e++){const t=a[e],{x:o,y:n,posR:s}=t;c.resources.push({...t,id:m(),...G_getRandomLocInCircle(o,n,s)})}return c})(d,e[T]),M.emitAll(G_S_START,i({startTime:p,gameData:h}))},stop(){R(),M.emitAll(G_S_STOP,i("The game was stopped.")),d.forEach(e=>{r(e)}),_()},finish(e){h.result=e,M.emitAll(G_S_FINISHED,i(h)),d.forEach(e=>{r(e)}),_()},setPractice(){g=!0,C=1e5},async setMapIndex(e){const t=await S();e>=0&&e<t&&(T=e)},confirmAction(e,t,o){const n=O(o,h);if(!n||n.dead)return console.error("No player exists in game or player is dead.",o),!1;const[s,a,r]=t.split(","),l=(([e,t])=>{const o=Math.sqrt(e*e+t*t);return[e/o,t/o]})([s-n.x,a-n.y]),c=((e,t,o,n)=>{const s=(e,t)=>{const{round:o,cos:n,sin:s,PI:a}=Math,r=n(t*=a/180),l=s(t);return[o(1e4*(e[0]*r-e[1]*l))/1e4,o(1e4*(e[0]*l+e[1]*r))/1e4]},a=(o,s)=>G_Body({proj:!0,type:e,id:m(),player:n.id,speed:t,color:n.color},l,u,c,o*t,s*t,g,_,i),r=[];let l=1,c=5/G_SCALE,i=h.maxRoundLength,d=o[0],p=o[1];const{color:u,x:g,y:_}=n;switch(e){case G_action_spread:for(let e=-5;e<=5;e+=5){let[t,n]=s(o,e);r.push(a(t,n))}break;case G_action_planetCracker:c=20/G_SCALE,l=10,r.push(a(d,p));break;case G_action_move:i=1e3,c=15/G_SCALE;default:r.push(a(d,p))}return r})(e,G_SPEEDS[r]&&G_SPEEDS[r][0]||G_SPEEDS.normal[0],l,n),i=((e,t,o)=>{const n=G_getActionCost(e)+G_getSpeedCost(t);return O(o,h).funds>n&&n})(e,r,o);return!1===i?(console.log("Invalid action, it costs too much.",e,r),!1):(h.projectiles=h.projectiles.concat(c),n.target=[s,a],n.funds-=i,n.cost=i,n.actions[e]-=n.actions[e]<99?1:0,n.action=e,n.ready=!0,k()&&(console.log("Starting after a moment..."),setTimeout(()=>{try{I()}catch(e){console.log("Error starting",e)}},500)),!0)},canStart:()=>!!g||d.length>1&&d.length<=4&&!u,isPractice:()=>g,isStarted:()=>u,emitAll(e,t){d.forEach(o=>{o[0].emit(e,t)})}};return M}})();