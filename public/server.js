(()=>{const e={},t=e=>e[0].id,o=e=>e[2]||t(e),s=(e,t)=>e[2]=t,n=e=>e[1],r=(e,t)=>e[1]=t,a=e=>e[1]=null,l=(e,t)=>[e,t],i=(e,t)=>JSON.stringify([e,t]),c=()=>(+new Date*Math.random()).toString(16),d=e=>(t,o)=>{try{e(t,o)}catch(e){console.error("ERROR",e.stack),o.send(i(null,"Internal server error."))}},p=()=>{const t=[],o=e=>{for(let o=0;o<t.length;o++){if(t[o].id===e)return!0}};for(const s in e){const r=n(e[s]);r&&(o(r.id)||t.push(r))}return t},_=()=>p().filter(e=>!e.isStarted()&&!e.isPractice()),m=()=>{((t,o,s)=>{for(const n in e){if(n===s)continue;const[r]=e[n];r.emit(t,o)}})(G_SOCKET_GAME_LIST_UPDATED,l(_()))},u=(t,o)=>{const s=(t=>e[t])(t);return s||(o.send(i(null,`No user exists: ${t}`)),!1)},A={[G_REST_CREATE_GAME+"/:id/:userName/:isPractice"]:d((e,t)=>{const{id:a,userName:l,isPractice:c}=e.params,d=u(a,t);if(d)if(l)if(n(d))t.send(i(null,`A game already exists for that user: ${o(d)}`));else{s(d,l);const e=`${l}'s Game`;console.log("Create game",e,c);const o=x(d,e);r(d,o),"true"===c&&o.setMapIndex(-1),t.send(i({id:o.id,name:e})),m()}else t.send(i(null,"No user name specified"))}),[G_REST_JOIN_GAME+"/:id/:args"]:d((e,t)=>{const{id:n,args:a}=e.params,l=a.indexOf(","),c=a.slice(0,l),d=a.slice(l+1),_=u(n,t);if(!_)return;const A=(e=>p().reduce((t,o)=>o.id===e?o:t,null))(c);A?(r(_,A),s(_,d),console.log("Join game",o(_),A.name),A.join(_)?(t.send(i({id:A.id,name:A.name,players:A.getPlayers()})),m()):t.send(i(null,"Could not join game."))):t.send(i(null,`A game exists for that user: ${n}`))}),[G_REST_LEAVE_GAME+"/:id"]:d((e,t)=>{const{id:s}=e.params,r=u(s,t);if(!r)return;const l=n(r);l?(console.log("Leave game",o(r),l.name),a(r),l.leave(r),t.send(i(l.id)),m()):t.send(i(null,`A game exists for that user: ${s}`))}),[G_REST_START_GAME+"/:id/:mapIndex"]:d((e,t)=>{const{id:o,mapIndex:s}=e.params,r=u(o,t);if(!r)return;const a=n(r);a?a.canStart()?(console.log("Start game",a.name),t.send(i(!0)),a.setMapIndex(Number(s)),a.start(),m()):t.send(i(null,"Cannot start game.")):(console.log("error",_()),t.send(i(null,`No game exists for that user: ${o}`)))}),[G_REST_GAME_CONFIRM_ACTION+"/:id/:action/:args"]:d((e,t)=>{const{id:s,action:r,args:a}=e.params,l=u(s,t);if(!l)return;const c=n(l);c?c.isStarted()?(console.log("Confirm action",c.name,o(l),r,a),c.confirmAction(r,a,l)?t.send(i(!0)):t.send(i(null,"Cannot confirm action."))):t.send(i(null,"Cannot send actions to a game that has not been started!")):t.send(i(null,`No game exists for that user: ${s}`))}),io:t=>{const o=(e=>[e,"",""])(t);e[t.id]=o,t.on("disconnect",d(()=>{console.log("Disconnected: "+t.id),(t=>{const[o,s]=t;s&&s.leave(t),delete e[o]})(o)}));const s=c();t.emit(G_SOCKET_CONNECTED,l({games:_(),maps:U,id:t.id,key:s})),console.log("Connected: "+t.id,s)}};module.exports=A;const G=60/G_SCALE,g=12*G_AU,y=20*G_AU,h=e=>({color:"aquamarine",mass:5*10**30,r:G,hp:5,...e}),f=(e,t,o)=>({x:e,y:t,r:o}),S=(e,t,o)=>({type:"coin",value:250,r:G_AU/4,x:e,y:t,posR:o}),U=[{name:"Small Map",maxRoundLength:5e3,maxPlayers:4,width:g,height:g,playerLocations:[f(0,-g/3,G_AU),f(0,g/3,G_AU),f(-g/3,0,G_AU),f(g/3,0,G_AU)],resourceLocations:[S(-g/1.8,-g/1.8,G_AU),S(g/1.8,-g/1.8,G_AU),S(-g/1.8,g/1.8,G_AU),S(g/1.8,g/1.8,G_AU),S(0,g/1.5,G_AU),S(0,-g/1.5,G_AU),S(g/1.5,0,G_AU),S(-g/1.5,0,G_AU)],planetLocations:[h({x:0,y:0,posR:0}),h({x:-g/3,y:-g/3,posR:G_AU}),h({x:g/3,y:-g/3,posR:G_AU}),h({x:-g/3,y:g/3,posR:G_AU}),h({x:g/3,y:g/3,posR:G_AU})]},{name:"Large Map",maxRoundLength:8e3,maxPlayers:4,width:y,height:y,playerLocations:[f(0,-y/1.5,G_AU),f(0,y/1.5,G_AU),f(-y/1.5,0,G_AU),f(y/1.5,0,G_AU)],resourceLocations:[S(0,-y/2.2,G_AU),S(0,y/2.2,G_AU),S(-y/2.2,0,G_AU),S(y/2.2,0,G_AU),S(-y/1.5,-y/1.5,G_AU),S(y/1.5,-y/1.5,G_AU),S(-y/1.5,y/1.5,G_AU),S(y/1.5,y/1.5,G_AU)],planetLocations:[h({x:G_AU,y:G_AU,posR:0}),h({x:-G_AU,y:-G_AU,posR:0}),h({x:-G_AU,y:G_AU,posR:0}),h({x:G_AU,y:-G_AU,posR:0}),h({x:y/1.1,y:y/1.1,posR:G_AU}),h({x:-y/1.1,y:y/1.1,posR:G_AU}),h({x:y/1.1,y:-y/1.1,posR:G_AU}),h({x:-y/1.1,y:-y/1.1,posR:G_AU}),h({x:-y/2.5,y:-y/2.5,posR:2*G_AU}),h({x:y/2.5,y:-y/2.5,posR:2*G_AU}),h({x:-y/2.5,y:y/2.5,posR:2*G_AU}),h({x:y/2.5,y:y/2.5,posR:2*G_AU})]}],x=(e,s)=>{let n,r,i,d,p=[e],_=0,u=!1,A=!1,G=null,g=1,y=0,h=25/G_SCALE,f=100,S=0;const x=["blue","red","green","yellow"],E=()=>{try{let e=+new Date;r=e-n,n=e;let t=G,o=G_applyGravity(t.projectiles,t.projectiles.concat(t.planets),t.players.filter(e=>!e.dead).concat(t.resources),r);G.collisions=o;let s=o.length;if(s){console.log("GOT A COLL",JSON.stringify(o));for(let e=0;e<s;e++){const[n,r]=o[e];let a=!0;if(r)if("coin"===r.type){L(n.meta.player,G).funds+=r.value,M(r.id,G),a=!1}else{if(r.meta){n.meta.speed>r.meta.speed?O(r.meta.id,G):(n.meta.speed<r.meta.speed||O(r.meta.id,G),O(n.meta.id,G)),o.reduce((e,t,o)=>t.meta&&t.meta.id===r.id?o:e,-1)>-1&&(o.splice(e,1),s--);continue}if(r.color){O(r.color,G,!0);const e=L(r.id,G);e.hp--,e.hp<=0&&(e.dead=!0)}}let l=t.projectiles.indexOf(n);l>-1&&a&&t.projectiles.splice(l,1)}}for(let e=0;e<G.projectiles.length;e++){const t=G.projectiles[e];"Move"===t.meta.type&&I(t.meta.player,t.px,t.py),n-_>=t.t&&(o.push([t,null]),G.projectiles.splice(e,1),e--,"Move"===t.meta.type&&I(t.meta.player,t.px,t.py))}if(0===G.projectiles.length)return void T();y++,(y>=10||s)&&(y=0,((e,t,o)=>{v.emitAll(G_SOCKET_BROADCAST_GAME,l({i:e,timestamp:t,gameData:o}))})(g++,n,G))}catch(e){console.error("error running simulation",e),T()}},R=()=>{console.log("START SIMULATION"),_=n=+new Date,r=0,v.emitAll(G_SOCKET_START_SIMULATION,l(G)),d=setTimeout(T,G.maxRoundLength),i=setInterval(E,G_FRAME_MS)},T=()=>{if(console.log("STOP SIMULATION"),u){v.emitAll(G_SOCKET_STOP_SIMULATION,l(G)),clearInterval(i),i=-1,clearTimeout(d),d=-1,G.projectiles=[],G.collisions=[];const e=j();e?(v.finished=!0,v.finish(e)):G.players.forEach(e=>{e.ready=!1,e.funds+=25})}},C=e=>{let t=e.length;e=[...e];const o=[];for(let s=0;s<t;s++){const t=Math.floor(Math.random()*e.length);o.push(e[t]),e.splice(t,1)}return o},L=(e,o)=>{const s="string"==typeof e?e:t(e);return o.players.reduce((e,t)=>t.id===s?t:e,null)},O=(e,t,o)=>{const s=o?((e,t)=>t.projectiles.reduce((t,o,s)=>o.color===e?s:t,-1))(e,t):((e,t)=>t.projectiles.reduce((t,o,s)=>o.meta.id===e?s:t,-1))(e,t);s>-1?t.projectiles.splice(s,1):console.log("NO PROJ FOUND?",e,o)},M=(e,t)=>{const o=((e,t)=>t.resources.reduce((t,o,s)=>o.id===e?s:t,-1))(e,t);o>-1&&t.resources.splice(o,1)},I=(e,t,o)=>{const s=L(e,G);N(t,o)&&(s.x=t,s.y=o)},N=(e,t)=>{const{width:o,height:s}=G;return e>=-o&&e<=o&&t>=-s&&t<=s},P=()=>G.players.reduce((e,t)=>e&&(!!t.dead||t.ready),!0),j=()=>{if(A)return!1;let e=[];for(let t=0;t<G.players.length;t++){const o=G.players[t];o.dead||e.push(o)}return 0===e.length?"draw":1===e.length&&e[0].id},D=()=>{const e=v.getPlayers();v.emitAll(G_SOCKET_LOBBY_LIST_UPDATED,l(e))},v={id:t(e),name:s,getPlayers:()=>p.map(e=>({id:t(e),userName:o(e)})),join:e=>u||A?(console.error("Cannot join"),!1):p.length<U[S].maxPlayers&&(p.push(e),D(),!0),leave(e){for(let t=0;t<p.length;t++){const o=p[t];if(o===e){if(p.splice(t,1),a(o),u){const e=L(o,G);return 0===p.length?v.stop():e.dead||(e.dead=!0),j()?v.stop():P()&&(console.log("Starting after a moment..."),setTimeout(()=>{try{R()}catch(e){console.log("Error starting",e)}},500)),!0}return 0===t?v.stop():D(),!0}}return!1},start(){u=!0,G=(e=>{let s=C(e);const n=U[S],{resourceLocations:r,planetLocations:a,playerLocations:l}=n,i={...n,players:[],planets:[],resources:[],projectiles:[],collisions:[],result:!1,baseFundsPerRound:25};for(let e=0;e<s.length;e++){const n=s[e],{x:r,y:a,r:c}=l[e],d=G_getRandomLocInCircle(r,a,c);i.players.push({id:t(n),name:o(n),funds:f,ready:!1,dead:!1,hp:1,color:x[e],r:h,...d,target:[d.x,d.y]})}for(let e=0;e<a.length;e++){const t=a[e],{x:o,y:s,mass:n,color:r,r:l,posR:c}=t,d=G_getRandomLocInCircle(o,s,c);i.planets.push(G_Body(r,n,r,l,0,0,d.x,d.y))}for(let e=0;e<r.length;e++){const t=r[e],{x:o,y:s,posR:n}=t;i.resources.push({...t,id:c(),...G_getRandomLocInCircle(o,s,n)})}return i})(p),v.emitAll(G_SOCKET_START_GAME,l({startTime:_,gameData:G}))},stop(){T(),v.emitAll(G_SOCKET_STOP_GAME,l("The game was stopped.")),p.forEach(e=>{a(e)}),m()},finish(e){console.log("Finish game."),G.result=e,v.emitAll(G_SOCKET_GAME_FINISHED,l(G)),p.forEach(e=>{a(e)}),m()},setMapIndex(e){e>=0&&e<U.length&&(S=e),-1===e&&(S=0,A=!0,f=1e4)},confirmAction(e,t,o){const s=L(o,G);if(!s)return console.error("No player exists in game",o),!1;if(s.dead)return console.error("Player is dead",o),!1;switch(e){case"Shoot":case"Move":const[n,r,a]=t.split(","),l=(([e,t])=>{const o=Math.sqrt(e*e+t*t);return[e/o,t/o]})([n-s.x,r-s.y]),i=((e,t,o,s)=>{let n=5/G_SCALE,r=G.maxRoundLength;"Move"===e&&(n=15/G_SCALE,r=1e3);const{color:a,x:l,y:i}=s;return[G_Body({type:e,id:c(),player:s.id,speed:t,color:s.color},1,a,n,o[0]*t,o[1]*t,l,i,r)]})(e,G_SPEEDS[a]&&G_SPEEDS[a][0]||G_SPEEDS.normal[0],l,s),d=((e,t,o)=>{const s=G_getActionCost(e)+G_getSpeedCost(t);return L(o,G).funds>s&&s})(e,a,o);if(!1===d)return console.log("Invalid action, it costs too much!",e,a),!1;G.projectiles=G.projectiles.concat(i),s.target=[n,r],s.funds-=d,s.cost=d;break;default:t=null}return s.action=e,s.ready=!0,P()&&(console.log("Starting after a moment..."),setTimeout(()=>{try{R()}catch(e){console.log("Error starting",e)}},500)),!0},canStart:()=>!!A||p.length>1&&p.length<=U[S].maxPlayers&&!u,isPractice:()=>A,isStarted:()=>u,emitAll(e,t){p.forEach(o=>{o[0].emit(e,t)})}};return v}})();