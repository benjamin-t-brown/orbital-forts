const G_R_CREATE="create",G_R_JOIN="join",G_R_LEAVE="leave",G_R_START="start",G_R_UPDATE_LOBBY="update-lobby",G_R_CONFIRM_ACTION="confirm",G_R_GET_REPLAYS_LIST="replays",G_R_GET_REPLAY="replay",G_S_CONNECTED="s-connected",G_S_LIST_UPDATED="s-game-list",G_S_CREATE="s-create",G_S_START="s-start",G_S_LOBBY_DATA="s-lobby-data",G_S_GAME_METADATA="s-game-meta",G_S_LEAVE="s-leave",G_S_JOIN="s-join",G_S_STOP="s-stop",G_S_BROADCAST="s-broadcast",G_S_START_SIMULATION="s-simulate-start",G_S_STOP_SIMULATION="s-simulate-stop",G_S_FINISHED="s-finished",G_GAME_TIME_BUFFER_MS=500;let G_DEBUG=!1;const G_MODES={standard:"standard",golf:"golf"},G_G=667428e-16,G_AU=1496e8,G_SCALE=75/G_AU,G_FRAME_MS=13.333,G_MASS_MIN=5*10**30,G_MASS_MAX=100*10**30;let G_SPEEDS={Normal:[55e3,0],Super:[125e3,50]};const G_action_move="Move",G_action_shoot="Shoot",G_action_spread="Spread Fire",G_action_planetCracker="Planet Crkr.",G_action_cluster="Cluster Bomb",G_action_waveBomb="Wave Bomb",G_action_clusterSpawn="Cluster Spawn",G_action_boomerang="Boomerang",G_res_coin="coin",G_res_spray="spread",G_res_planetCracker="planet-cracker",G_res_cluster="cluster",G_res_waveBomb="wave",G_res_wormhole="wormhole",G_res_boomerang="boomerang",G_res_proximityMine="prox",G_res_shockwave="shockwave",G_res_sprites={coin:{elem:"div",label:"",offsetTop:25,content:"$"},spread:{elem:"div",label:"Spread Fire",offsetTop:45,content:"S"},"planet-cracker":{elem:"div",label:"Planet Crkr.",offsetTop:45,content:"P"},cluster:{elem:"div",label:"Cluster Bomb",offsetTop:45,content:"C"},wave:{elem:"div",label:"Wave Bomb",offsetTop:45,content:"W"},wormhole:{elem:"div",label:"",offsetTop:32,content:"<div></div>"},boomerang:{elem:"div",label:"Boomerang",offsetTop:45,content:"B"},prox:{elem:"div",label:"",offsetTop:25,content:'<div class="prox2">!</div>'}};let G_actions=[["Move",50],["Shoot",0],["Spread Fire",100],["Wave Bomb",125],["Planet Crkr.",150],["Cluster Bomb",200],["Boomerang",25]];const G_entity={nothing:"ent_nothing",player:"ent_player",planet:"ent_planet",projectile:"ent_projectile",coin:"ent_res_coin",planetCracker:"ent_res_planet_cracker",spray:"ent_res_spread",cluster:"ent_res_cluster",wave:"ent_res_wave",wormhole:"ent_res_wormhole",boomerang:"ent_res_boomerang",proximityMine:"ent_res_prox",shockwave:"ent_shockwave"},isPlayer=e=>!(!e.color||!e.name),isPlanet=e=>!!e.color,isProjectile=e=>e.meta&&e.meta.proj,isCoin=e=>"coin"===e.type,isSpray=e=>"spread"===e.type,isPlanetCracker=e=>"planet-cracker"===e.type,isCluster=e=>"cluster"===e.type,isWaveBomb=e=>"wave"===e.type,isWormhole=e=>"wormhole"===e.type,isBoomerang=e=>"boomerang"===e.type,isProximityMine=e=>"prox"===e.type,isShockwave=e=>"shockwave"===e.type,G_getEntityType=e=>{switch(!0){case!e:return"ent_nothing";case!(!(t=e).color||!t.name):return"ent_player";case isProjectile(e):return"ent_projectile";case isCoin(e):return G_entity.coin;case isSpray(e):return G_entity.spray;case isPlanetCracker(e):return G_entity.planetCracker;case isPlanet(e):return"ent_planet";case isCluster(e):return G_entity.cluster;case isWaveBomb(e):return G_entity.wave;case isWormhole(e):return G_entity.wormhole;case isBoomerang(e):return G_entity.boomerang;case isProximityMine(e):return"ent_res_prox";case isShockwave(e):return"ent_shockwave";default:return"ent_nothing"}var t},G_createCollision=(e,t,o)=>[e.id,t&&t.id||0,!1,G_randomId(),o],G_randomId=()=>(+new Date*Math.random()).toString(16),G_normalize=(e,t,o,r,n)=>r+(e-t)*(n-r)/(o-t),G_dist=(e,t)=>Math.sqrt(e**2+t**2),G_collidesCir=(e,t,o,r)=>G_dist(e,t)<=o+r,G_getActionCost=e=>G_actions.reduce((t,[o,r])=>o===e?r:t,0),G_getSpeedCost=e=>G_SPEEDS[e][1],G_getRandomLocInCircle=(e,t,o)=>{let r=2*Math.PI*Math.random(),n=Math.sqrt(Math.random())*o;return{x:e+n*Math.cos(r),y:t+n*Math.sin(r)}},G_getNormalizedVec=([e,t])=>{const o=Math.sqrt(e*e+t*t);return[e/o,t/o]},G_toRadians=e=>e*Math.PI/180,G_getEntityFromEntMap=(e,t)=>t.entMap[e],G_forEachEntityType=(e,t,o)=>{for(let r in o.entMap){const n=o.entMap[r];G_getEntityType(n)===t&&e(n,r)}},G_getHeadingTowards=(e,t,o,r)=>{let n=r-t,s=o-e;const{sqrt:a,asin:i}=Math;let p=a(s*s+n*n),c=0;return c=r>=t&&o>=e?180*i(n/p)/Math.PI+90:r>=t&&o<e?180*i(n/-p)/Math.PI-90:r<t&&o>e?180*i(n/p)/Math.PI+90:180*i(-n/p)/Math.PI-90,c>=360&&(c=360-c),c<0&&(c=360+c),isNaN(c)?0:c},G_rotateVectorDeg=(e,t)=>{const{round:o,cos:r,sin:n,PI:s}=Math,a=r(t*=s/180),i=n(t);return[o(1e4*(e[0]*a-e[1]*i))/1e4,o(1e4*(e[0]*i+e[1]*a))/1e4]},G_Body=(e,t,o,r,n,s,a,i,p)=>{const c=new SAT.Circle(new SAT.Vector(a,i),r);return{id:G_randomId(),meta:e,mass:t,color:o,r:r,vx:n,vy:s,ax:0,ay:0,px:a,py:i,t:p,update:function(){},satCircle:c}},G_body_setAcceleration=(e,t,o)=>{e.ax=t,e.ay=o},G_body_setUpdateFunction=(e,t)=>{e.update=t},G_Field=(e,t,o,r,n,s)=>{const a=new SAT.Box(new SAT.Vector(e,t),o,r).toPolygon();return a.translate(-o/2,-r/2),a.rotate(G_toRadians(n)),{id:G_randomId(),type:s,angle:n,x:e,y:t,w:o,h:r,satBox:a}},G_Shockwave=(e,t,o,r,n,s)=>{const a=new SAT.Circle(new SAT.Vector(t,o),r);return{id:G_randomId(),x:t,y:o,r:r,t:n,tStart:s,type:e,sent:!1,update:function(){},satCircle:a,meta:{}}},G_createProjectiles=({type:e,speed:t,normalizedVec:o,player:r,pos:n,lifetimeMultiplier:s},a)=>{const i=[];let p=1,c=5/G_SCALE,l=8e3,y=o[0],h=o[1],{color:u,x:_,y:m}=r;n&&(_=n.x,m=n.y);const d=(o,n)=>{let s=G_Body({proj:!0,type:e,player:r.id,speed:t,color:r.color},p,u,c,o*t,n*t,_,m,l);return s.tStart=a.tss,s};switch(e){case"Spread Fire":for(let e=-5;e<=5;e+=5){let[t,r]=G_rotateVectorDeg(o,e);i.push(d(t,r))}break;case"Planet Crkr.":c=20/G_SCALE,p=10,i.push(d(y,h));break;case"Cluster Bomb":l=2e3*s,c=10/G_SCALE,i.push(d(y,h));break;case"Cluster Spawn":c=4/G_SCALE,l=1750;for(let e=0;e<360;e+=20){let[t,r]=G_rotateVectorDeg(o,e);i.push(d(t,r)),l+=30}break;case"Wave Bomb":l=2e3*s,c=12/G_SCALE,p=8,i.push(d(y,h));break;case"Boomerang":{const e=d(y,h);e.update=e=>{const t=G_toRadians(G_getHeadingTowards(e.px,e.py,r.x,r.y)),o=-Math.round(350*Math.cos(t));G_body_setAcceleration(e,Math.round(350*Math.sin(t)),o)},i.push(e);break}case"Move":l=1e3,c=15/G_SCALE;default:i.push(d(y,h))}return i},G_createEntities=(e,t)=>{const o=(t,o)=>{const r=G_getEntityFromEntMap(o,e);let{px:n,py:s,x:a,y:i,r:p}=t,{px:c,py:l,x:y,y:h,r:u}=r;return G_collidesCir((y||c)-(a||n),(h||l)-(i||s),p,u)},r=(e,t)=>{for(let r=0;r<t.length;r++)if(o(e,t[r]))return!0;return!1},{planetLocations:n,resourceLocations:s}=t;for(let t=0;t<n.length;t++){const o=n[t],{x:s,y:a,mass:i,color:p,r:c,posR:l}=o;let y,h=0;do{const e=G_getRandomLocInCircle(s,a,l);y=G_Body({color:p,type:"planet"},i,p,c,0,0,e.x,e.y),h++}while(h<=10&&r(y,e.planets));if(h<=10){const t=y.id;e.planets.push(t),e.entMap[t]=y}}for(let t=0;t<s.length;t++){const o=s[t],{x:n,y:a,posR:i}=o;let p,c=0;do{p={...o,...G_getRandomLocInCircle(n,a,i)},c++}while(c<=10&&r(p,e.planets.concat(e.resources)));if(c<=10){const t=G_randomId();p.id=t,e.resources.push(t),e.entMap[t]=p}}},G_getCorrespondingWormhole=(e,t)=>{const o=t.resources.map(e=>G_getEntityFromEntMap(e,t)).filter(e=>"wormhole"===e.type),r=o.indexOf(e);return r%2==0?o[r+1]:o[r-1]};
/** @preserve SAT.js - Version 0.8.0 - Copyright 2012 - 2018 - Jim Riecken <jimr@jimr.ca> - released under the MIT License. https://github.com/jriecken/sat-js */
var SAT;SAT=function(){var e={};function t(e,t){this.x=e||0,this.y=t||0}function o(e,o){this.pos=e||new t,this.r=o||0,this.offset=new t}function r(e,o){this.pos=e||new t,this.angle=0,this.offset=new t,this.setPoints(o||[])}function n(e,o,r){this.pos=e||new t,this.w=o||0,this.h=r||0}function s(){this.a=null,this.b=null,this.overlapN=new t,this.overlapV=new t,this.clear()}e.Vector=t,e.V=t,t.prototype.copy=t.prototype.copy=function(e){return this.x=e.x,this.y=e.y,this},t.prototype.clone=t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.perp=t.prototype.perp=function(){var e=this.x;return this.x=this.y,this.y=-e,this},t.prototype.rotate=t.prototype.rotate=function(e){var t=this.x,o=this.y;return this.x=t*Math.cos(e)-o*Math.sin(e),this.y=t*Math.sin(e)+o*Math.cos(e),this},t.prototype.reverse=t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.normalize=t.prototype.normalize=function(){var e=this.len();return e>0&&(this.x=this.x/e,this.y=this.y/e),this},t.prototype.add=t.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this},t.prototype.sub=t.prototype.sub=function(e){return this.x-=e.x,this.y-=e.y,this},t.prototype.scale=t.prototype.scale=function(e,t){return this.x*=e,this.y*=void 0!==t?t:e,this},t.prototype.project=t.prototype.project=function(e){var t=this.dot(e)/e.len2();return this.x=t*e.x,this.y=t*e.y,this},t.prototype.projectN=t.prototype.projectN=function(e){var t=this.dot(e);return this.x=t*e.x,this.y=t*e.y,this},t.prototype.reflect=t.prototype.reflect=function(e){var t=this.x,o=this.y;return this.project(e).scale(2),this.x-=t,this.y-=o,this},t.prototype.reflectN=t.prototype.reflectN=function(e){var t=this.x,o=this.y;return this.projectN(e).scale(2),this.x-=t,this.y-=o,this},t.prototype.dot=t.prototype.dot=function(e){return this.x*e.x+this.y*e.y},t.prototype.len2=t.prototype.len2=function(){return this.dot(this)},t.prototype.len=t.prototype.len=function(){return Math.sqrt(this.len2())},e.Circle=o,o.prototype.getAABB=o.prototype.getAABB=function(){var e=this.r;return new n(this.pos.clone().add(this.offset).sub(new t(e,e)),2*e,2*e).toPolygon()},o.prototype.setOffset=o.prototype.setOffset=function(e){return this.offset=e,this},e.Polygon=r,r.prototype.setPoints=r.prototype.setPoints=function(e){if(!this.points||this.points.length!==e.length){var o,r=this.calcPoints=[],n=this.edges=[],s=this.normals=[];for(o=0;o<e.length;o++){var a=e[o],i=o<e.length-1?e[o+1]:e[0];a===i||a.x!==i.x||a.y!==i.y?(r.push(new t),n.push(new t),s.push(new t)):(e.splice(o,1),o-=1)}}return this.points=e,this._recalc(),this},r.prototype.setAngle=r.prototype.setAngle=function(e){return this.angle=e,this._recalc(),this},r.prototype.setOffset=r.prototype.setOffset=function(e){return this.offset=e,this._recalc(),this},r.prototype.rotate=r.prototype.rotate=function(e){for(var t=this.points,o=t.length,r=0;r<o;r++)t[r].rotate(e);return this._recalc(),this},r.prototype.translate=r.prototype.translate=function(e,t){for(var o=this.points,r=o.length,n=0;n<r;n++)o[n].x+=e,o[n].y+=t;return this._recalc(),this},r.prototype._recalc=function(){var e,t=this.calcPoints,o=this.edges,r=this.normals,n=this.points,s=this.offset,a=this.angle,i=n.length;for(e=0;e<i;e++){var p=t[e].copy(n[e]);p.x+=s.x,p.y+=s.y,0!==a&&p.rotate(a)}for(e=0;e<i;e++){var c=t[e],l=o[e].copy(e<i-1?t[e+1]:t[0]).sub(c);r[e].copy(l).perp().normalize()}return this},r.prototype.getAABB=r.prototype.getAABB=function(){for(var e=this.calcPoints,o=e.length,r=e[0].x,s=e[0].y,a=e[0].x,i=e[0].y,p=1;p<o;p++){var c=e[p];c.x<r?r=c.x:c.x>a&&(a=c.x),c.y<s?s=c.y:c.y>i&&(i=c.y)}return new n(this.pos.clone().add(new t(r,s)),a-r,i-s).toPolygon()},r.prototype.getCentroid=r.prototype.getCentroid=function(){for(var e=this.calcPoints,o=e.length,r=0,n=0,s=0,a=0;a<o;a++){var i=e[a],p=a===o-1?e[0]:e[a+1],c=i.x*p.y-p.x*i.y;r+=(i.x+p.x)*c,n+=(i.y+p.y)*c,s+=c}return new t(r/=s*=3,n/=s)},e.Box=n,n.prototype.toPolygon=n.prototype.toPolygon=function(){var e=this.pos,o=this.w,n=this.h;return new r(new t(e.x,e.y),[new t,new t(o,0),new t(o,n),new t(0,n)])},e.Response=s,s.prototype.clear=s.prototype.clear=function(){return this.aInB=!0,this.bInA=!0,this.overlap=Number.MAX_VALUE,this};for(var a=[],i=0;i<10;i++)a.push(new t);var p=[];for(i=0;i<5;i++)p.push([]);var c=new s,l=new n(new t,1e-6,1e-6).toPolygon();function y(e,t,o){for(var r=Number.MAX_VALUE,n=-Number.MAX_VALUE,s=e.length,a=0;a<s;a++){var i=e[a].dot(t);i<r&&(r=i),i>n&&(n=i)}o[0]=r,o[1]=n}function h(e,t,o,r,n,s){var i=p.pop(),c=p.pop(),l=a.pop().copy(t).sub(e),h=l.dot(n);if(y(o,n,i),y(r,n,c),c[0]+=h,c[1]+=h,i[0]>c[1]||c[0]>i[1])return a.push(l),p.push(i),p.push(c),!0;if(s){var u,_,m=0;i[0]<c[0]?(s.aInB=!1,i[1]<c[1]?(m=i[1]-c[0],s.bInA=!1):m=(u=i[1]-c[0])<(_=c[1]-i[0])?u:-_):(s.bInA=!1,i[1]>c[1]?(m=i[0]-c[1],s.aInB=!1):m=(u=i[1]-c[0])<(_=c[1]-i[0])?u:-_);var d=Math.abs(m);d<s.overlap&&(s.overlap=d,s.overlapN.copy(n),m<0&&s.overlapN.reverse())}return a.push(l),p.push(i),p.push(c),!1}function u(e,t){var o=e.len2(),r=t.dot(e);return r<0?_:r>o?d:m}e.isSeparatingAxis=h;var _=-1,m=0,d=1;function f(e,t,o){for(var r=a.pop().copy(t.pos).add(t.offset).sub(e.pos),n=t.r,s=n*n,i=e.calcPoints,p=i.length,c=a.pop(),l=a.pop(),y=0;y<p;y++){var h=y===p-1?0:y+1,m=0===y?p-1:y-1,f=0,v=null;c.copy(e.edges[y]),l.copy(r).sub(i[y]),o&&l.len2()>s&&(o.aInB=!1);var G=u(c,l);if(G===_){c.copy(e.edges[m]);var g=a.pop().copy(r).sub(i[m]);if((G=u(c,g))===d){if((b=l.len())>n)return a.push(r),a.push(c),a.push(l),a.push(g),!1;o&&(o.bInA=!1,v=l.normalize(),f=n-b)}a.push(g)}else if(G===d){if(c.copy(e.edges[h]),l.copy(r).sub(i[h]),(G=u(c,l))===_){if((b=l.len())>n)return a.push(r),a.push(c),a.push(l),!1;o&&(o.bInA=!1,v=l.normalize(),f=n-b)}}else{var b,x=c.perp().normalize();if((b=l.dot(x))>0&&Math.abs(b)>n)return a.push(r),a.push(x),a.push(l),!1;o&&(v=x,f=n-b,(b>=0||f<2*n)&&(o.bInA=!1))}v&&o&&Math.abs(f)<Math.abs(o.overlap)&&(o.overlap=f,o.overlapN.copy(v))}return o&&(o.a=e,o.b=t,o.overlapV.copy(o.overlapN).scale(o.overlap)),a.push(r),a.push(c),a.push(l),!0}function v(e,t,o){for(var r=e.calcPoints,n=r.length,s=t.calcPoints,a=s.length,i=0;i<n;i++)if(h(e.pos,t.pos,r,s,e.normals[i],o))return!1;for(i=0;i<a;i++)if(h(e.pos,t.pos,r,s,t.normals[i],o))return!1;return o&&(o.a=e,o.b=t,o.overlapV.copy(o.overlapN).scale(o.overlap)),!0}return e.pointInCircle=function(e,t){var o=a.pop().copy(e).sub(t.pos).sub(t.offset),r=t.r*t.r,n=o.len2();return a.push(o),n<=r},e.pointInPolygon=function(e,t){l.pos.copy(e),c.clear();var o=v(l,t,c);return o&&(o=c.aInB),o},e.testCircleCircle=function(e,t,o){var r=a.pop().copy(t.pos).add(t.offset).sub(e.pos).sub(e.offset),n=e.r+t.r,s=n*n,i=r.len2();if(i>s)return a.push(r),!1;if(o){var p=Math.sqrt(i);o.a=e,o.b=t,o.overlap=n-p,o.overlapN.copy(r.normalize()),o.overlapV.copy(r).scale(o.overlap),o.aInB=e.r<=t.r&&p<=t.r-e.r,o.bInA=t.r<=e.r&&p<=e.r-t.r}return a.push(r),!0},e.testPolygonCircle=f,e.testCirclePolygon=function(e,t,o){var r=f(t,e,o);if(r&&o){var n=o.a,s=o.aInB;o.overlapN.reverse(),o.overlapV.reverse(),o.a=o.b,o.b=n,o.aInB=o.bInA,o.bInA=s}return r},e.testPolygonPolygon=v,e}();const G_applyAction=(e,t,o)=>{const{action:r,speed:n,target:[s,a],auxArgs:i,vec:p,cost:c}=o;G_createProjectiles({type:r,speed:n,normalizedVec:p,player:t,...i},e).forEach(t=>{e.projectiles.push(t.id),e.entMap[t.id]=t}),t.target=[s,a],t.funds-=c,t.cost=c,t.actions[r]-=t.actions[r]<99?1:0,t.action=r},G_applyGravity=(e,t,o,r)=>{const n=(e,t)=>{let{px:r,py:n,mass:s,r:a}=e,{px:i,py:p,mass:c,r:l}=t,y=i-r,h=p-n,u=Math.max(G_dist(y,h),.001),_=!!o&&G_collidesCir(y,h,a,l),m=G_G*s*c/u**2,d=Math.atan2(h,y);return{fx:Math.cos(d)*m,fy:Math.sin(d)*m,c:_}};let s=[],a=172800*r/13.333;for(let i=0;i<e.length;i++){let p=e[i],c=0,l=0;for(let e=0;e<t.length;e++){let o=t[e];if(p===o)continue;let{fx:r,fy:a,c:i}=n(p,o);if(i&&o.meta.color!==p.meta.color){const e=G_createCollision(p,o);s.push(e)}else c+=r,l+=a}if(o)for(let e=0;e<o.length;e++){let t=o[e],{x:r,y:n,r:a}=t;if(G_collidesCir(r-p.px,n-p.py,a,p.r)&&p.meta.player!==t.id){const e=G_createCollision(p,t);s.push(e)}}p.vx+=c/p.mass*a+p.ax*r/13.333,p.vy+=l/p.mass*a+p.ay*r/13.333,p.px+=p.vx*a,p.py+=p.vy*a}return s},G_applyFields=(e,t)=>{const o=new SAT.Response;for(let r=0;r<e.length;r++){const n=e[r];for(let e=0;e<t.fields.length;e++){o.clear();const r=G_getEntityFromEntMap(t.fields[e]);if(SAT.testCirclePolygon(n.satCircle,r.satBox,o)){const e=G_createCollision(n,r,o);t.collisions.push(e)}}}},G_applyShockwaves=(e,t)=>{const o=t.shockwaves.map(e=>G_getEntityFromEntMap(e,t));for(let r=0;r<o.length;r++){const n=o[r];if(t.tss-n.tStart>n.t){t.shockwaves.splice(r,1);for(let o=0;o<e.length;o++){const r=e[o];G_collidesCir(n.x-(void 0===r.px?r.x:r.px),n.y-(void 0===r.py?r.y:r.py),r.r,n.r)&&t.collisions.push(G_createCollision(n,r))}}}},movePlayer=(e,t,o,r)=>{const n=G_getEntityFromEntMap(e,r);isInBounds(t,o,n.r,n.r,r)&&(n.x=t,n.y=o)},isInBounds=(e,t,o,r,n)=>{const{width:s,height:a}=n;return e-o>=-s&&e+o<=s&&t-r>=-a&&t+r<=a},G_simulate=(e,{nowDt:t})=>{let o=e,{projectiles:r,planets:n,players:s,resources:a,fields:i}=o,p=[];const c=r.map(e=>G_getEntityFromEntMap(e,o)),l=c.concat(s.map(e=>G_getEntityFromEntMap(e,o))).concat(a.filter(e=>"shockwave"!==G_getEntityFromEntMap(e,o).type).map(e=>G_getEntityFromEntMap(e,o))),y=c.concat(n.map(e=>G_getEntityFromEntMap(e,o))),h=s.map(e=>G_getEntityFromEntMap(e,o)).filter(e=>!e.dead).concat(a.map(e=>G_getEntityFromEntMap(e,o)));let u=G_applyGravity(c,y,h,t);e.collisions=e.collisions.concat(u),G_applyFields(c,e),G_applyShockwaves(l,e);for(let t=0;t<e.collisions.length;t++){const o=e.collisions[t];if(o[2])continue;o[2]=!0;const{remove:r,cb:n}=G_handleCollision(o,e);r&&(e.collisions.splice(t,1),t--),n&&p.push(n)}for(let t=0;t<r.length;t++){const n=G_getEntityFromEntMap(r[t],o);if("Move"===n.meta.type&&(G_getEntityFromEntMap(n.meta.player,o).dead?n.meta.remove=!0:movePlayer(n.meta.player,n.px,n.py,o)),n.update&&n.update(n),n.meta.remove)r.splice(t,1),delete e.entMap[n.id],t--;else if(e.tss-n.tStart>=n.t||!isInBounds(n.px,n.py,n.r,n.r,o)){const e=G_createCollision(n,null),{remove:s,cb:a}=G_handleCollision(e,o);"Move"===n.meta.type||s||(e[2]=!0,o.collisions.push(e)),a&&p.push(a),r.splice(t,1),t--}}for(let e=0;e<n.length;e++)G_getEntityFromEntMap(n[e],o).meta.remove&&(n.splice(e,1),e--);for(let e=0;e<i.length;e++)G_getEntityFromEntMap(i[e],o).meta.remove&&(i.splice(e,1),e--);for(let e=0;e<p.length;e++)p[e]()},removeResource=(e,t)=>{const o=t.resources.indexOf(e);o>-1&&t.resources.splice(o,1)},createShockwaveCb=(e,t,o,r)=>()=>{const n=G_Shockwave("shockwave",e,t,115/G_SCALE,250,r.tss);n.meta={player:o&&o.id,type:"ent_shockwave"},r.entMap[n.id]=n,r.shockwaves.push(n.id)},createClusterSpawnCb=(e,t,o)=>()=>{G_createProjectiles({type:"Cluster Spawn",speed:G_SPEEDS.Normal[0],normalizedVec:[0,1],player:t,pos:{x:e.px,y:e.py}},o).forEach(e=>{o.projectiles.push(e.id),o.entMap[e.id]=e})},G_handleCollision=(e,t)=>{const[o,r]=e,n=G_getEntityFromEntMap(o,t);if(!n)return;const s=G_getEntityFromEntMap(r,t);if(!n)return;let a,i;return n.meta&&(i=n.meta.type,n.meta.player&&(a=G_getEntityFromEntMap(n.meta.player,t))),G_handleCollisionStandard({projectile:n,other:s,player:a,type:i,gameData:t})},G_handleCollisionStandard=({projectile:e,other:t,player:o,type:r,gameData:n})=>{const s=G_getEntityType(e),a=G_getEntityType(t);if("ent_shockwave"===s&&!o){switch(a){case"ent_player":G_getEntityFromEntMap(t.id,n).dead=!0;break;case"ent_res_prox":return removeResource(t.id,n),{cb:createShockwaveCb(t.x,t.y,null,n)}}return{}}switch(a){case"ent_player":if(G_getEntityFromEntMap(t.id,n).dead=!0,e.meta.remove=!0,"Cluster Bomb"===r)return{cb:createClusterSpawnCb(e,o,n)};break;case"ent_projectile":if(t.meta.player===e.meta.player)return{remove:!0};const s=e.meta.speed*e.mass,a=t.meta.speed*t.mass;if(s>=a&&(t.meta.remove=!0),a>=s&&(e.meta.remove=!0),"Cluster Bomb"===r)return{cb:createClusterSpawnCb(e,o,n)};if("Wave Bomb"===r)return{cb:createShockwaveCb(t.x,t.y,o,n)};break;case G_entity.coin:o.funds+=t.value,removeResource(t.id,n);break;case G_entity.spray:o.actions["Spread Fire"]+=2,removeResource(t.id,n);break;case G_entity.planetCracker:o.actions["Planet Crkr."]+=2,removeResource(t.id,n);break;case G_entity.cluster:o.actions["Cluster Bomb"]+=2,removeResource(t.id,n);break;case G_entity.boomerang:o.actions.Boomerang+=2,removeResource(t.id,n);break;case G_entity.wave:o.actions["Wave Bomb"]+=2,removeResource(t.id,n);break;case"ent_planet":if(e.meta.remove=!0,"Move"===r)o.dead=!0;else if("Planet Crkr."===r)t.meta.remove=!0;else{if("Cluster Bomb"===r)return{cb:createClusterSpawnCb(e,o,n)};if("Wave Bomb"===r)return{cb:createShockwaveCb(t.x,t.y,o,n)}}break;case G_entity.wormhole:const{px:i,py:p,r:c}=e,{x:l,y:y,r:h}=t,u=l-i,_=y-p,[m,d]=G_getNormalizedVec([u,_]),f=G_getCorrespondingWormhole(t,n),v=m*(h+c+1)+f.x,G=d*(h+c+1)+f.y;e.meta.prevX=e.px,e.meta.prevY=e.py,e.px=v,e.py=G;break;case"ent_res_prox":return removeResource(t.id,n),e.meta.remove=!0,"Move"===r&&(o.dead=!0),{cb:createShockwaveCb(t.x,t.y,null,n)};case"ent_nothing":if("Cluster Bomb"===r)return{cb:createClusterSpawnCb(e,o,n)};if("Wave Bomb"===r)return{cb:createShockwaveCb(e.px,e.py,o,n)}}return{}};